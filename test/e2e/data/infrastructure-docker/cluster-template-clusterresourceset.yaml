apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: DockerCluster
metadata:
  name: '${ CLUSTER_NAME }'
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: Cluster
metadata:
  name: '${ CLUSTER_NAME }'
spec:
  clusterNetwork:
    services:
      cidrBlocks: ['${ DOCKER_SERVICE_CIDRS }']
    pods:
      cidrBlocks: ['${ DOCKER_POD_CIDRS }']
    serviceDomain: '${ DOCKER_SERVICE_DOMAIN }'
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: DockerCluster
    name: '${ CLUSTER_NAME }'
  controlPlaneRef:
    kind: KubeadmControlPlane
    apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
    name: "${CLUSTER_NAME}-control-plane"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: DockerMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-control-plane"
spec:
  template:
    spec:
      extraMounts:
        - containerPath: "/var/run/docker.sock"
          hostPath: "/var/run/docker.sock"
---
kind: KubeadmControlPlane
apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
metadata:
  name: "${ CLUSTER_NAME }-control-plane"
spec:
  replicas: ${ CONTROL_PLANE_MACHINE_COUNT }
  infrastructureTemplate:
    kind: DockerMachineTemplate
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    name: "${CLUSTER_NAME}-control-plane"
  kubeadmConfigSpec:
    clusterConfiguration:
      controllerManager:
        extraArgs: {enable-hostpath-provisioner: 'true'}
      apiServer:
        certSANs: [localhost, 127.0.0.1]
    initConfiguration:
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs: {eviction-hard: 'nodefs.available<0%,nodefs.inodesFree<0%,imagefs.available<0%'}
    joinConfiguration:
      nodeRegistration:
        criSocket: /var/run/containerd/containerd.sock
        kubeletExtraArgs: {eviction-hard: 'nodefs.available<0%,nodefs.inodesFree<0%,imagefs.available<0%'}
  version: "${KUBERNETES_VERSION}"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: DockerMachineTemplate
metadata:
  name: "${CLUSTER_NAME}-md-0"
spec:
  template:
    spec:
      extraMounts:
        - containerPath: "/var/run/docker.sock"
          hostPath: "/var/run/docker.sock"
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
kind: KubeadmConfigTemplate
metadata:
  name: "${ CLUSTER_NAME }-md-0"
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          kubeletExtraArgs: {eviction-hard: 'nodefs.available<0%,nodefs.inodesFree<0%,imagefs.available<0%'}
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineDeployment
metadata:
  name: "${CLUSTER_NAME}-md-0"
spec:
  clusterName: "${CLUSTER_NAME}"
  replicas: ${ WORKER_MACHINE_COUNT }
  selector:
    matchLabels:
  template:
    metadata:
      labels:
        "nodepool": "pool1"
    spec:
      clusterName: "${ CLUSTER_NAME }"
      version: "${ KUBERNETES_VERSION }"
      bootstrap:
        configRef:
          name: "${ CLUSTER_NAME }-md-0"
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
          kind: KubeadmConfigTemplate
      infrastructureRef:
        name: "${ CLUSTER_NAME }-md-0"
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: DockerMachineTemplate
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineHealthCheck
metadata:
  name: "${CLUSTER_NAME}-mhc-0"
spec:
  clusterName: "${ CLUSTER_NAME }"
  maxUnhealthy: 100%
  selector:
    matchLabels:
      nodepool: "pool1"
  unhealthyConditions:
    - type: E2ENodeUnhealthy
      status: "True"
      timeout: 30s
---
apiVersion: addons.cluster.x-k8s.io/v1alpha3
kind: ClusterResourceSet
metadata:
  name:  "${CLUSTER_NAME}-crs-0"
spec:
  strategy: ApplyOnce
  clusterSelector:
    matchLabels:
      label: e2e
  resources:
    - name: test-secret1
      kind: Secret
    - name: test-configmap1
      kind: ConfigMap
    - name: test-notexist
      kind: Secret
---
apiVersion: v1
kind: Secret
metadata:
  name: test-secret1
type: addons.cluster.x-k8s.io/resource-set
stringData:
  addon.yaml: |-
    {
      "kind": "ConfigMap",
      "apiVersion": "v1",
      "metadata": {
        "name": "test-e2e-cm",
        "namespace": "default"
      },
      "data": {
        "service_name": "none"
      }
    }
